{"version":3,"sources":["../src/services/entityID.service.ts","../src/utils/registryChain/registerEntity.ts","../src/config/abis/l1abi.ts","../src/config/abis/ensRegistryAbi.ts","../src/config/index.ts","../src/environment.ts","../src/utils/ens/checkOwner.ts","../src/utils/ens/getResolverAddress.ts","../src/utils/registryChain/generateTexts.ts","../src/utils/registryChain/readEntity.ts","../src/index.ts"],"sourcesContent":["import { type IAgentRuntime, Service, ServiceType } from \"@elizaos/core\";\nimport { registerOrUpdateEntity } from \"@utils/registryChain/registerEntity\";\nimport { getWallet } from \"@/environment\";\nimport { EntityConfig } from \"@/types\";\n\nexport class EntityIDService extends Service {\n  static serviceType: ServiceType = \"register_entityID\" as ServiceType; // TODO need to add a ServiceType to Eliza\n\n  getInstance(): EntityIDService {\n    return EntityIDService.getInstance();\n  }\n\n  async initialize(_runtime: IAgentRuntime): Promise<void> {\n    const wallet = getWallet(_runtime);\n\n    const bio = Array.isArray(_runtime.character.bio)\n      ? _runtime.character.bio.join(\" \")\n      : _runtime.character.bio;\n\n    const entityConfig: EntityConfig = {\n      partners: [],\n      // character fields\n      name: _runtime.character.name,\n      entity__name: _runtime.character.name,\n      entity__registrar: \"ai\",\n      description: bio,\n      // avatar: _runtime.character.nft.prompt\n      keywords: _runtime.character.topics.join(\",\"),\n      entity__selected__model: _runtime.character.modelProvider,\n      entity__eliza__plugins: _runtime.character.plugins.join(\",\"),\n      // generic fields\n      entity__type: \"elizaOS\",\n      location: \"elizaOS\",\n      // com.github: {repo's remote url}\n      owner: wallet.account.address,\n      \"com.twitter\": _runtime.character.twitterProfile?.username,\n      ...(process.env.AGENT_URL && { url: process.env.AGENT_URL }),\n      ...(process.env.AGENT_API_URL && {\n        entrypoint__url: process.env.AGENT_API_URL,\n      }),\n    };\n\n    await registerOrUpdateEntity(entityConfig, wallet);\n  }\n}\n","import {\n  Address,\n  BaseError,\n  encodeAbiParameters,\n  getContract,\n  Hex,\n  isAddressEqual,\n  namehash,\n  RawContractError,\n  toHex,\n  WalletClient,\n  zeroAddress,\n  zeroHash,\n} from \"viem\";\nimport { packetToBytes } from \"viem/ens\";\nimport { simulateContract } from \"viem/actions\";\n\nimport { CONTRACT_ADDRESSES, l1abi } from \"@/config\";\nimport { publicClient } from \"@/environment\";\nimport { EntityConfig } from \"@/types\";\n\nimport { checkOwner } from \"@utils/ens/checkOwner\";\nimport { getResolverAddress } from \"@utils/ens/getResolverAddress\";\nimport { generateTexts } from \"@utils/registryChain/generateTexts\";\nimport { readEntityRecord } from \"@utils/registryChain/readEntity\";\n\nfunction getBirthDateRecords(currentEntityRecords: any) {\n  if (currentEntityRecords.birthDate) return {};\n\n  const m = new Date().getMonth() + 1;\n  const d = new Date().getDate();\n  const y = new Date().getFullYear();\n\n  return {\n    entity__formation__date: {\n      type: \"Date\",\n      setValue: `${y}-${m}-${d}`,\n    },\n    birthDate: {\n      type: \"Date\",\n      setValue: `${y}-${m}-${d}`,\n    },\n  };\n}\n\nfunction getSchemaFields(\n  entityConfig: EntityConfig,\n  currentEntityRecords: any,\n) {\n  const result: Record<string, any> = {};\n\n  for (const [key, value] of Object.entries(entityConfig)) {\n    if (Array.isArray(value)) {\n      result[key] = value; // preserve arrays like `partners`\n    } else if (typeof value === \"string\") {\n      result[key] = {\n        type: \"string\",\n        setValue: value,\n      };\n    } else {\n      throw new Error(`Unexpected type in entityConfig ${typeof value}`);\n    }\n  }\n\n  return {\n    ...getBirthDateRecords(currentEntityRecords),\n    ...result,\n  };\n}\n\nfunction getRevertErrorData(err: unknown) {\n  if (!(err instanceof BaseError)) return undefined;\n  const error = err.walk() as RawContractError;\n  return error?.data as { errorName: string; args: unknown[] };\n}\n\nasync function resolverCallback(\n  wallet: WalletClient,\n  message: any,\n  resBytes: any,\n  callbackData: any,\n) {\n  const req = encodeAbiParameters(\n    [{ type: \"bytes\" }, { type: \"address\" }],\n    [message.callData, wallet.account.address],\n  );\n  const callbackContract: any = getContract({\n    wallet: wallet,\n    args: [...callbackData.args, resBytes, req],\n    ...callbackData,\n  });\n  const tx = await callbackContract.write[callbackData.functionName]([\n    ...callbackData.args,\n    resBytes,\n    req,\n  ]);\n  return tx.hash;\n}\n\ntype CcipRequestParameters = {\n  body: { data: Hex; signature: any; sender: Address };\n  url: string;\n};\n\nasync function ccipRequest({\n  body,\n  url,\n}: CcipRequestParameters): Promise<Response> {\n  try {\n    const res = await fetch(url.replace(\"/{sender}/{data}.json\", \"\"), {\n      body: JSON.stringify(body, (_, value) =>\n        typeof value === \"bigint\" ? value.toString() : value,\n      ),\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return res;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}\n\nasync function handleDBStorage({\n  domain,\n  url,\n  message,\n  wallet,\n}: {\n  domain: any;\n  url: string;\n  message: any;\n  wallet: WalletClient;\n}) {\n  const signature = await wallet.signTypedData({\n    account: wallet.account,\n    domain,\n    message,\n    types: {\n      Message: [\n        { name: \"callData\", type: \"bytes\" },\n        { name: \"sender\", type: \"address\" },\n        { name: \"expirationTimestamp\", type: \"uint256\" },\n      ],\n    },\n    primaryType: \"Message\",\n  });\n  const requestResponse = await ccipRequest({\n    body: {\n      data: message.callData,\n      signature: { message, domain, signature },\n      sender: message.sender,\n    },\n    url,\n  });\n  return requestResponse;\n}\n\nconst executeWriteToResolver = async (\n  wallet: WalletClient,\n  entityName: string,\n  constitutionData: Hex[],\n  callbackData: any,\n) => {\n  // IMPORTANT: Change made to gateway witout test. Should be handling POST with :{sender}/:{calldata}.json with server/this.handleRequest\n\n  try {\n    await simulateContract(publicClient as any, {\n      functionName: \"register\",\n      args: [\n        toHex(packetToBytes(entityName)),\n        wallet.account.address,\n        BigInt(0) /* duration */,\n        zeroHash /* secret */,\n        zeroAddress /* resolver */,\n        constitutionData /* data */,\n        false /* reverseRecord */,\n        0 /* fuses */,\n        zeroHash /* extraData */,\n      ],\n      abi: l1abi,\n      address: CONTRACT_ADDRESSES.DATABASE_RESOLVER,\n    }); // TODO remove any\n  } catch (err) {\n    const data = getRevertErrorData(err);\n    switch (data?.errorName) {\n      case \"StorageHandledByOffChainDatabase\": {\n        const [domain, url, message] = data.args as any[];\n        let urlToUse: string = url;\n        if (process.env.NEXT_PUBLIC_RESOLVER_URL) {\n          urlToUse = process.env.NEXT_PUBLIC_RESOLVER_URL;\n        }\n        const res: any = await handleDBStorage({\n          domain,\n          url: urlToUse,\n          message,\n          wallet,\n        });\n        if (res.status === 200) {\n          const resBytes = await res.text();\n\n          if (!callbackData) return resBytes;\n          return await resolverCallback(\n            wallet,\n            message,\n            resBytes,\n            callbackData,\n          );\n        }\n        return \"0x\";\n      }\n      default:\n        console.error(\"error registering domain: \", { err });\n    }\n  }\n};\n\nexport const registerOrUpdateEntity = async (\n  entityConfig: EntityConfig,\n  wallet: WalletClient,\n) => {\n  const nodeHash = namehash(`${entityConfig.name}.ai.entity.id`);\n\n  // If there is no owner to the domain, make the register. If there is an owner skip register\n  const currentEntityOwner = await checkOwner(nodeHash);\n\n  // Read record if already registered\n  const currentEntityRecords = await readEntityRecord(nodeHash);\n\n  const schemaFields = getSchemaFields(entityConfig, currentEntityRecords);\n  const texts: any[] = generateTexts(schemaFields);\n\n  const resolverAddr = await getResolverAddress(\"ai.entity.id\");\n\n  // Should check if EITHER public reg is the domain owner OR connect addr is owner and has approved\n  // If false, prevent the registration\n  if (\n    !isAddressEqual(currentEntityOwner, wallet.account.address) &&\n    !isAddressEqual(currentEntityOwner, resolverAddr) &&\n    !isAddressEqual(currentEntityOwner, zeroAddress) //IN CASES OF OFFCHAIN REGISTRATION, THE ON CHAIN OWNER IS 0x0. THE GATEWAY THEN CHECKS IF 'OWNED' OFFCHAIN\n  ) {\n    throw Error(\n      \"The user does not have permission to deploy contracts for this domain\",\n    );\n  }\n\n  // TODO compare records to see if need to update\n\n  const constitutionData = texts.map((x) =>\n    encodeAbiParameters(\n      [{ type: \"string\" }, { type: \"string\" }],\n      [x.key, x.value],\n    ),\n  );\n\n  try {\n    await executeWriteToResolver(\n      wallet,\n      entityConfig.name,\n      constitutionData,\n      null,\n    );\n\n    return;\n  } catch (err: any) {\n    console.error(err);\n    throw err;\n  }\n};\n","// address: 0x8c6ab6c2e78d7d2b2a6204e95d8a8874a95348a4\n\nexport const l1abi = [\n  {\n    type: \"constructor\",\n    inputs: [\n      { name: \"_chainId\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"_target_resolver\", type: \"address\", internalType: \"address\" },\n      { name: \"_target_registrar\", type: \"address\", internalType: \"address\" },\n      {\n        name: \"_verifier\",\n        type: \"address\",\n        internalType: \"contract IEVMVerifier\",\n      },\n      { name: \"_metadataUrl\", type: \"string\", internalType: \"string\" },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"addr\",\n    inputs: [{ name: \"node\", type: \"bytes32\", internalType: \"bytes32\" }],\n    outputs: [{ name: \"\", type: \"address\", internalType: \"address payable\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"addr\",\n    inputs: [\n      { name: \"node\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"coinType\", type: \"uint256\", internalType: \"uint256\" },\n    ],\n    outputs: [{ name: \"\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"transfer\",\n    inputs: [\n      { type: \"bytes32\", name: \"node\" },\n      { type: \"address\", name: \"owner\" },\n    ],\n    stateMutability: \"view\",\n    outputs: [],\n  },\n  {\n    type: \"function\",\n    name: \"addrCallback\",\n    inputs: [\n      { name: \"values\", type: \"bytes[]\", internalType: \"bytes[]\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [{ name: \"\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"addrCoinTypeCallback\",\n    inputs: [\n      { name: \"values\", type: \"bytes[]\", internalType: \"bytes[]\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [{ name: \"\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"contenthash\",\n    inputs: [{ name: \"node\", type: \"bytes32\", internalType: \"bytes32\" }],\n    outputs: [{ name: \"\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"contenthashCallback\",\n    inputs: [\n      { name: \"values\", type: \"bytes[]\", internalType: \"bytes[]\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [{ name: \"\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"getStorageSlotsCallback\",\n    inputs: [\n      { name: \"response\", type: \"bytes\", internalType: \"bytes\" },\n      { name: \"extradata\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"metadata\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"string\", internalType: \"string\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"metadataUrl\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"string\", internalType: \"string\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"multicall\",\n    inputs: [{ name: \"\", type: \"bytes[]\", internalType: \"bytes[]\" }],\n    outputs: [{ name: \"\", type: \"bytes[]\", internalType: \"bytes[]\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"owner\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"register\",\n    inputs: [\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n      { name: \"\", type: \"address\", internalType: \"address\" },\n      { name: \"\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"\", type: \"address\", internalType: \"address\" },\n      { name: \"\", type: \"bytes[]\", internalType: \"bytes[]\" },\n      { name: \"\", type: \"bool\", internalType: \"bool\" },\n      { name: \"\", type: \"uint16\", internalType: \"uint16\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [],\n    stateMutability: \"payable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerParams\",\n    inputs: [\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n      { name: \"\", type: \"uint256\", internalType: \"uint256\" },\n    ],\n    outputs: [\n      { name: \"\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"registerParamsCallback\",\n    inputs: [\n      { name: \"values\", type: \"bytes[]\", internalType: \"bytes[]\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [\n      { name: \"price\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"commitTime\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"extraData\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"renounceOwnership\",\n    inputs: [],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"resolve\",\n    inputs: [\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n      { name: \"data\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [{ name: \"result\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"setAddr\",\n    inputs: [\n      { name: \"\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"setAddr\",\n    inputs: [\n      { name: \"\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"\", type: \"address\", internalType: \"address\" },\n    ],\n    outputs: [],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"setContenthash\",\n    inputs: [\n      { name: \"\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"setMetadataUrl\",\n    inputs: [{ name: \"newUrl\", type: \"string\", internalType: \"string\" }],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"setTarget\",\n    inputs: [\n      { name: \"key\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"target\", type: \"address\", internalType: \"address\" },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"setText\",\n    inputs: [\n      { name: \"\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"\", type: \"string\", internalType: \"string\" },\n      { name: \"\", type: \"string\", internalType: \"string\" },\n    ],\n    outputs: [],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"supportsInterface\",\n    inputs: [{ name: \"interfaceID\", type: \"bytes4\", internalType: \"bytes4\" }],\n    outputs: [{ name: \"\", type: \"bool\", internalType: \"bool\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"targets\",\n    inputs: [{ name: \"\", type: \"bytes32\", internalType: \"bytes32\" }],\n    outputs: [{ name: \"\", type: \"address\", internalType: \"address\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"text\",\n    inputs: [\n      { name: \"node\", type: \"bytes32\", internalType: \"bytes32\" },\n      { name: \"key\", type: \"string\", internalType: \"string\" },\n    ],\n    outputs: [{ name: \"\", type: \"string\", internalType: \"string\" }],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"textCallback\",\n    inputs: [\n      { name: \"values\", type: \"bytes[]\", internalType: \"bytes[]\" },\n      { name: \"\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n    outputs: [{ name: \"\", type: \"bytes\", internalType: \"bytes\" }],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"transferOwnership\",\n    inputs: [{ name: \"newOwner\", type: \"address\", internalType: \"address\" }],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"event\",\n    name: \"L2HandlerContractAddressChanged\",\n    inputs: [\n      {\n        name: \"chainId\",\n        type: \"uint256\",\n        indexed: true,\n        internalType: \"uint256\",\n      },\n      {\n        name: \"previousContractAddress\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"newContractAddress\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"L2HandlerDefaultChainIdChanged\",\n    inputs: [\n      {\n        name: \"previousChainId\",\n        type: \"uint256\",\n        indexed: true,\n        internalType: \"uint256\",\n      },\n      {\n        name: \"newChainId\",\n        type: \"uint256\",\n        indexed: true,\n        internalType: \"uint256\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"MetadataChanged\",\n    inputs: [\n      {\n        name: \"previousUrl\",\n        type: \"string\",\n        indexed: true,\n        internalType: \"string\",\n      },\n      { name: \"newUrl\", type: \"string\", indexed: true, internalType: \"string\" },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"OffChainDatabaseHandlerURLChanged\",\n    inputs: [\n      {\n        name: \"previousUrl\",\n        type: \"string\",\n        indexed: true,\n        internalType: \"string\",\n      },\n      { name: \"newUrl\", type: \"string\", indexed: true, internalType: \"string\" },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"OwnershipTransferred\",\n    inputs: [\n      {\n        name: \"previousOwner\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"newOwner\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n    ],\n    anonymous: false,\n  },\n  { type: \"error\", name: \"CommandTooLong\", inputs: [] },\n  {\n    type: \"error\",\n    name: \"InvalidReference\",\n    inputs: [\n      { name: \"value\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"max\", type: \"uint256\", internalType: \"uint256\" },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"OffchainLookup\",\n    inputs: [\n      { name: \"sender\", type: \"address\", internalType: \"address\" },\n      { name: \"urls\", type: \"string[]\", internalType: \"string[]\" },\n      { name: \"callData\", type: \"bytes\", internalType: \"bytes\" },\n      { name: \"callbackFunction\", type: \"bytes4\", internalType: \"bytes4\" },\n      { name: \"extraData\", type: \"bytes\", internalType: \"bytes\" },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ResponseLengthMismatch\",\n    inputs: [\n      { name: \"actual\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"expected\", type: \"uint256\", internalType: \"uint256\" },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"StorageHandledByL2\",\n    inputs: [\n      { name: \"chainId\", type: \"uint256\", internalType: \"uint256\" },\n      { name: \"contractAddress\", type: \"address\", internalType: \"address\" },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"StorageHandledByOffChainDatabase\",\n    inputs: [\n      {\n        name: \"sender\",\n        type: \"tuple\",\n        internalType: \"struct IWriteDeferral.domainData\",\n        components: [\n          { name: \"name\", type: \"string\", internalType: \"string\" },\n          { name: \"version\", type: \"string\", internalType: \"string\" },\n          { name: \"chainId\", type: \"uint64\", internalType: \"uint64\" },\n          {\n            name: \"verifyingContract\",\n            type: \"address\",\n            internalType: \"address\",\n          },\n        ],\n      },\n      { name: \"url\", type: \"string\", internalType: \"string\" },\n      {\n        name: \"data\",\n        type: \"tuple\",\n        internalType: \"struct IWriteDeferral.messageData\",\n        components: [\n          { name: \"callData\", type: \"bytes\", internalType: \"bytes\" },\n          { name: \"sender\", type: \"address\", internalType: \"address\" },\n          {\n            name: \"expirationTimestamp\",\n            type: \"uint256\",\n            internalType: \"uint256\",\n          },\n        ],\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"TooManyCommands\",\n    inputs: [{ name: \"max\", type: \"uint256\", internalType: \"uint256\" }],\n  },\n] as const;\n","export const ensRegistryAbi = [\n  {\n    inputs: [{ internalType: \"contract ENS\", name: \"_old\", type: \"address\" }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"operator\",\n        type: \"address\",\n      },\n      { indexed: false, internalType: \"bool\", name: \"approved\", type: \"bool\" },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"label\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"NewOwner\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"resolver\",\n        type: \"address\",\n      },\n    ],\n    name: \"NewResolver\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { indexed: false, internalType: \"uint64\", name: \"ttl\", type: \"uint64\" },\n    ],\n    name: \"NewTTL\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"operator\", type: \"address\" },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"old\",\n    outputs: [{ internalType: \"contract ENS\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"node\", type: \"bytes32\" }],\n    name: \"owner\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"node\", type: \"bytes32\" }],\n    name: \"recordExists\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"node\", type: \"bytes32\" }],\n    name: \"resolver\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"operator\", type: \"address\" },\n      { internalType: \"bool\", name: \"approved\", type: \"bool\" },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n    ],\n    name: \"setOwner\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"resolver\", type: \"address\" },\n      { internalType: \"uint64\", name: \"ttl\", type: \"uint64\" },\n    ],\n    name: \"setRecord\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { internalType: \"address\", name: \"resolver\", type: \"address\" },\n    ],\n    name: \"setResolver\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"label\", type: \"bytes32\" },\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n    ],\n    name: \"setSubnodeOwner\",\n    outputs: [{ internalType: \"bytes32\", name: \"\", type: \"bytes32\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { internalType: \"bytes32\", name: \"label\", type: \"bytes32\" },\n      { internalType: \"address\", name: \"owner\", type: \"address\" },\n      { internalType: \"address\", name: \"resolver\", type: \"address\" },\n      { internalType: \"uint64\", name: \"ttl\", type: \"uint64\" },\n    ],\n    name: \"setSubnodeRecord\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"bytes32\", name: \"node\", type: \"bytes32\" },\n      { internalType: \"uint64\", name: \"ttl\", type: \"uint64\" },\n    ],\n    name: \"setTTL\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes32\", name: \"node\", type: \"bytes32\" }],\n    name: \"ttl\",\n    outputs: [{ internalType: \"uint64\", name: \"\", type: \"uint64\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n] as const;\n","import { Address } from \"viem\";\n\nexport * from \"./abis/l1abi\";\nexport * from \"./abis/ensRegistryAbi\";\n\nexport const CONTRACT_ADDRESSES = {\n  ENS_REGISTRY: \"0x00000000000c2e074ec69a0dfb2997ba6c7d2e1e\" as Address,\n  DATABASE_RESOLVER: \"0x8c6ab6c2e78d7d2b2a6204e95d8a8874a95348a4\" as Address,\n} as const;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { createPublicClient, createWalletClient, http } from \"viem\";\nimport { sepolia } from \"viem/chains\";\nimport { getAccount } from \"@utils/web3.utils\";\n\nexport const publicClient = createPublicClient({\n  chain: sepolia,\n  transport: http(),\n});\n\nexport const getWallet = (_runtime: IAgentRuntime) => {\n  const privateKey = runtime.getSetting(\n    \"EVM_PRIVATE_KEY\",\n  ) satisfies string as Hex;\n\n  if (!privateKey) {\n    throw new Error(\"EVM_PRIVATE_KEY is not set\");\n  }\n\n  return createWalletClient({\n    account: privateKeyToAccount(privateKey),\n    chain: sepolia,\n    transport: http(),\n  });\n};\n","import { Hex } from \"viem\";\nimport { publicClient } from \"@/environment\";\nimport { CONTRACT_ADDRESSES, ensRegistryAbi } from \"@/config\";\n\nexport const checkOwner = async (nodeHash: Hex) => {\n  const onchainOwner = await publicClient.readContract({\n    functionName: \"owner\",\n    address: CONTRACT_ADDRESSES.ENS_REGISTRY,\n    abi: ensRegistryAbi,\n    args: [nodeHash],\n  });\n\n  return onchainOwner;\n};\n","import { Address, getContract, namehash, zeroAddress } from \"viem\";\nimport { CONTRACT_ADDRESSES, ensRegistryAbi } from \"@/config\";\nimport { publicClient } from \"@/environment\";\n\nexport const getResolverAddress = async (domain: string) => {\n  let resolverAddr: Address = zeroAddress;\n\n  // Check resolver type\n  const registry: any = getContract({\n    client: publicClient as any,\n    abi: ensRegistryAbi,\n    address: CONTRACT_ADDRESSES.ENS_REGISTRY,\n  });\n\n  try {\n    resolverAddr = await registry.read.resolver([namehash(domain)]);\n  } catch (err: any) {\n    console.log(\"ERROR GETTING CURRENT RESOLVER ADDRESS: \", err.message);\n  }\n\n  if (resolverAddr === zeroAddress) {\n    try {\n      resolverAddr = await registry.read.resolver([\n        namehash(domain.split(\".\").slice(1).join(\".\")),\n      ]);\n    } catch (err: any) {\n      console.log(\n        \"ERROR GETTING CURRENT PARENT RESOLVER ADDRESS: \",\n        err.message,\n      );\n    }\n  }\n\n  return resolverAddr;\n};\n","import { isAddress, zeroAddress } from \"viem\";\n\nexport const DISPLAY_KEYS = [\n  \"LEI\",\n  \"name\",\n  \"address\",\n  \"description\",\n  \"url\",\n  \"location\",\n  \"avatar\",\n  \"entity__name\",\n  \"entity__address\",\n  \"entity__registrar\",\n  \"entity__type\",\n  \"entity__description\",\n  \"entity__purpose\",\n  \"entity__formation__date\",\n  \"entity__lockup__days\",\n  \"entity__additional__terms\",\n  \"entity__selected__model\",\n  \"entity__lookup__number\",\n  \"entity__code\",\n  \"entity__arbitrator\",\n  \"partner__[0]__name\",\n  \"partner__[0]__type\",\n  \"partner__[0]__wallet__address\",\n  \"partner__[0]__physical__address\",\n  \"partner__[0]__DOB\",\n  \"partner__[0]__is__manager\",\n  \"partner__[0]__is__signer\",\n  \"partner__[0]__lockup\",\n  \"partner__[0]__shares\",\n  \"partner__[1]__name\",\n  \"partner__[1]__type\",\n  \"partner__[1]__wallet__address\",\n  \"partner__[1]__physical__address\",\n  \"partner__[1]__DOB\",\n  \"partner__[1]__is__manager\",\n  \"partner__[1]__is__signer\",\n  \"partner__[1]__lockup\",\n  \"partner__[1]__shares\",\n  \"partner__[2]__name\",\n  \"partner__[2]__type\",\n  \"partner__[2]__wallet__address\",\n  \"partner__[2]__physical__address\",\n  \"partner__[2]__DOB\",\n  \"partner__[2]__is__manager\",\n  \"partner__[2]__is__signer\",\n  \"partner__[2]__lockup\",\n  \"partner__[2]__shares\",\n  \"partner__[3]__name\",\n  \"partner__[3]__type\",\n  \"partner__[3]__wallet__address\",\n  \"partner__[3]__physical__address\",\n  \"partner__[3]__DOB\",\n  \"partner__[3]__is__manager\",\n  \"partner__[3]__is__signer\",\n  \"partner__[3]__lockup\",\n  \"partner__[3]__shares\",\n  \"partner__[4]__name\",\n  \"partner__[4]__type\",\n  \"partner__[4]__wallet__address\",\n  \"partner__[4]__physical__address\",\n  \"partner__[4]__DOB\",\n  \"partner__[4]__is__manager\",\n  \"partner__[4]__is__signer\",\n  \"partner__[4]__lockup\",\n  \"partner__[4]__shares\",\n  \"partner__[5]__name\",\n  \"partner__[5]__type\",\n  \"partner__[5]__wallet__address\",\n  \"partner__[5]__physical__address\",\n  \"partner__[5]__DOB\",\n  \"partner__[5]__is__manager\",\n  \"partner__[5]__is__signer\",\n  \"partner__[5]__lockup\",\n  \"partner__[5]__shares\",\n];\n\nexport const generateTexts = (fields: any) => {\n  // THE PURPOSE OF THIS FUNCTION IS TO CONVERT THE ENTIRE DATA OBJECT COLLECTED INTO TEXT RECORDS FOR ALL RESOLVER TYPES\n  const texts: any[] = [];\n  fields.partners.forEach((partner: any, idx: any) => {\n    const partnerKey = `partner__[${idx}]__`;\n    for (const field in Object.keys(partner)) {\n      if (partner[field].type === \"address\" || field === \"wallet__address\") {\n        if (!isAddress(partner[field]?.setValue)) {\n          texts.push({ key: partnerKey + field, value: zeroAddress });\n        } else {\n          texts.push({\n            key: partnerKey + field,\n            value: partner[field]?.setValue,\n          });\n        }\n      } else if (partner[field].type === \"boolean\") {\n        texts.push({\n          key: partnerKey + field,\n          value: partner[field]?.setValue ? \"true\" : \"false\",\n        });\n      } else if (partner[field].type === \"Date\") {\n        const m = new Date().getMonth() + 1;\n        const d = new Date().getDate();\n        const y = new Date().getFullYear();\n        texts.push({ key: partnerKey + field, value: `${y}-${m}-${d}` });\n      } else if (field !== \"roles\") {\n        texts.push({\n          key: partnerKey + field,\n          value: partner[field]?.setValue,\n        });\n      } else if (partner[field]?.setValue) {\n        for (const role in partner[field]?.setValue) {\n          texts.push({ key: `${partnerKey}is__${role}`, value: \"true\" });\n        }\n      }\n    }\n  });\n\n  for (const key in Object.keys(fields)) {\n    if (key !== \"partners\" && DISPLAY_KEYS.includes(key)) {\n      texts.push({ key: key, value: fields[key]?.setValue });\n    }\n  }\n\n  return texts;\n};\n","import {\n  Address,\n  decodeAbiParameters,\n  encodeFunctionData,\n  getContract,\n  Hex,\n  parseAbi,\n} from \"viem\";\n\nimport { l1abi } from \"@/config\";\nimport { publicClient } from \"@/environment\";\n\nimport { DISPLAY_KEYS } from \"@utils/registryChain/generateTexts\";\nimport { getResolverAddress } from \"@utils/ens/getResolverAddress\";\n\nexport async function readEntityRecord(nodeHash: Hex) {\n  const resolverAddress = await getResolverAddress(\"ai.entity.id\");\n  return await readResolverData(resolverAddress, nodeHash);\n}\n\nasync function readResolverData(resolverAddress: Address, nodeHash: any) {\n  let results: any = {};\n  try {\n    const calls = DISPLAY_KEYS.map((key) =>\n      encodeFunctionData({\n        abi: parseAbi([\"function text(bytes32,string) view returns (string)\"]),\n        functionName: \"text\",\n        args: [nodeHash, key],\n      }),\n    );\n\n    const resolverContract: any = getContract({\n      client: publicClient as any,\n      abi: [\n        ...l1abi,\n        ...parseAbi([\n          \"function multicallView(bytes[] calldata) view returns (bytes calldata)\",\n        ]),\n      ],\n      address: resolverAddress,\n    });\n\n    const multicallResponse = await resolverContract.read.multicallView([\n      calls,\n    ]);\n\n    const encodedTexts = decodeAbiParameters(\n      [{ type: \"bytes[]\" }],\n      multicallResponse,\n    )[0];\n\n    const decodedResults: any[] = encodedTexts.map(\n      (result: any, index: number) => {\n        try {\n          return decodeAbiParameters([{ type: \"string\" }], result)?.[0];\n        } catch (error) {\n          console.error(`Failed to decode text(${DISPLAY_KEYS[index]})`, error);\n          return \"\";\n        }\n      },\n    );\n\n    // Convert results into a key-value object\n    results = DISPLAY_KEYS.reduce(\n      (acc, key, index) => {\n        acc[key] = decodedResults[index] || \"\"; // Assign null if decoding failed\n        return acc;\n      },\n      {} as Record<string, string | null>,\n    );\n  } catch (err: any) {\n    console.log(\"Error reading resolver data \", err.message);\n  }\n\n  if (!results.name || !results?.entity__registrar)\n    throw new Error(\n      \"results.name or results?.entity__registrar not registered\",\n    );\n\n  //hardcodes or derived fields\n  results.domain = `${results.name}.${results.entity__registrar}.entity.id`;\n  return results;\n}\n","import { Plugin } from \"@elizaos/core\";\nimport { EntityIDService } from \"@services/entityID.service\";\n\nexport const entityIDPlugin: Plugin = {\n  name: \"plugin-entityID\",\n  description:\n    \"The EntityID Agent Registry Plugin for ElizaOS enables AI developers to register their agents on-chain via RegistryChain. It automates smart contract interactions, ensuring verifiable and decentralized identities for AI agents in Web3.\",\n  services: [new EntityIDService()],\n};\n"],"mappings":"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","names":["getContract","namehash","zeroAddress","zeroAddress","_a","getContract","getContract","getContract","zeroAddress","namehash"]}